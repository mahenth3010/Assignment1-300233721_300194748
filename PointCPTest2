//This file contains material supporting section 2.9 of the textbook:
//"Object Oriented Software Engineering" and is issued under the open-source
//license found at www.lloseng.com 

import java.io.*;
import java.util.Scanner;

/**
 * This class prompts the user for a set of coordinates, and then converts them
 * from polar to cartesian or vice-versa.
 *
 * @author Fran&ccedil;ois B&eacute;langer
 * @author Dr Timothy C. Lethbridge
 * @author Paul Holden
 * @version July 2000
 */
public class PointCPTest2 {
//Class methods *****************************************************

	private static Scanner myObj;

	/**
	 * This method is responsible for the creation of the PointCP object. This can
	 * be done in two ways; the first, by using the command line and running the
	 * program using <code> java 
	* PointCPTest &lt;coordtype (c/p)&gt; &lt;X/RHO&gt; &lt;Y/THETA&gt;
	* </code> and the second by getting the program to prompt the user. If the user
	 * does not enter a valid sequence at the command line, the program will prompte
	 * him or her.
	 *
	 * @param args[0] The coordinate type. P for polar and C for cartesian.
	 * @param args[1] The value of X or RHO.
	 * @param args[2] The value of Y or THETA.
	 */
	public static void main(String[] args) {
		PointCP2 point2;
	
		myObj = new Scanner(System.in);


		System.out.println("Cartesian-Polar Coordinates Conversion Program \nPointCP2");
		

		// Check if the user input coordinates from the command line
		// If he did, create the PointCP object from these arguments.
		// If he did not, prompt the user for them.
		try {
			point2 = new PointCP2(args[0].toUpperCase().charAt(0), Double.valueOf(args[1]).doubleValue(),Double.valueOf(args[2]).doubleValue());
		} catch (Exception e) {
			// If we arrive here, it is because either there were no
			// command line arguments, or they were invalid


			if (args.length != 0)
				System.out.println("Invalid arguments on command line");

			try {
				point2 = getInput();
			} catch (IOException ex) {
				System.out.println("Error getting input. Ending program.");
				return;
			}
		}
		System.out.println("\nYou entered:\n" + point2);

		point2.convertStorageToPolar();
		System.out.println("\nAfter asking to store as Polar:\n" + point2);


		System.out.print("\nWould you like to convert the Polar points into Cartesian points? (Y)es or (N)o: ");
		String ans = myObj.nextLine();
		
		
		if (ans.toUpperCase().trim().equals("Y") || ans.toUpperCase().trim().equals("YES") ) {	
			System.out.println("\nAfter asking to compute Cartesian:\n(" + point2.getX() + "," + point2.getY() + ")\n");
			System.out.println("Thank you for running the program");
			
		} else {
			System.out.println("Thank you for running the program");
		}	
		
	}



	/**
	 * This method obtains input from the user and verifies that it is valid. When
	 * the input is valid, it returns a PointCP object.
	 *
	 * @return A PointCP constructed using information obtained from the user.
	 * @throws IOException If there is an error getting input from the user.
	 */

	private static PointCP2 getInput() throws IOException {
		byte[] buffer = new byte[1024]; // Buffer to hold byte input
		boolean isOK = false; // Flag set if input correct
		String theInput = ""; // Input information

		double a = 0.0;
		double b = 0.0;

		// Allow the user to enter the two different arguments

		for (int i = 0; i < 2; i++) {
			while (!(isOK)) {
				isOK = true; // flag set to true assuming input will be valid

				if (i == 0) {
					System.out.print("Enter the value of Rho using a decimal point (.): ");

				} else {
					System.out.print("Enter the value of Theta using a decimal point (.): ");
				}

				// Initialize the buffer before we read the input
				for (int k = 0; k < 1024; k++)
					buffer[k] = '\u0020';

				System.in.read(buffer);
				theInput = new String(buffer).trim();

				// Verify the user's input
				try {
					if (i == 0) {
						a = Double.valueOf(theInput).doubleValue();
					} else {
						b = Double.valueOf(theInput).doubleValue();
					}
				} catch (Exception e) {
					System.out.println("Incorrect input");
					isOK = false; // Reset flag as so not to end while loop
				}

			}
			// Reset flag so while loop will prompt for other arguments
			isOK = false;
		}
		// Return a new PointCP object
		return (new PointCP2('P', a, b));
	}
}
